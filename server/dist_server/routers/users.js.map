{"version":3,"sources":["../../server/routers/users.js"],"names":["upload","dest","Router","express","captchaText","post","req","res","body","username","password","passwordConfirm","verification","json","type","content","min","max","toLowerCase","UsersModel","findOne","then","info","dateRegister","Date","toLocaleString","replace","insertMany","catch","err","token","jwt","sign","id","_id","profile","config","jwtSecret","captcha","svgCaptcha","create","size","noise","color","background","text","data","single","next","query","fs","rename","file","path","destination","redirect"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,SAAS,sBAAO,EAAEC,MAAM,uBAAR,EAAP,CAAb,C,CAAwD;;AAHvB;AAFF;AAO/B,IAAIC,SAASC,kBAAQD,MAAR,EAAb;AACA,IAAIE,cAAc,EAAlB;;AAEAF,OAAOG,IAAP,CAAY,WAAZ,EAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,oBAC0BD,IAAIE,IAD9B;AAAA,QAC5BC,QAD4B,aAC5BA,QAD4B;AAAA,QAClBC,QADkB,aAClBA,QADkB;AAAA,QACRC,eADQ,aACRA,eADQ;AAAA,QACSC,YADT,aACSA,YADT;;AAEpC,QAAI,wBAAQH,QAAR,CAAJ,EAAuB;AACnBF,YAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAoBC,SAAU,4BAA9B,EAAT;AACH,KAFD,MAEM,IAAI,wBAAQL,QAAR,CAAJ,EAAuB;AACzBH,YAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAoBC,SAAU,4BAA9B,EAAT;AACH,KAFK,MAEA,IAAI,CAAC,yBAASL,QAAT,EAAmB,EAAEM,KAAM,CAAR,EAAWC,KAAM,EAAjB,EAAnB,CAAL,EAA+C;AACjDV,YAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAoBC,SAAU,mCAA9B,EAAT;AACH,KAFK,MAEA,IAAI,wBAAQJ,eAAR,CAAJ,EAA8B;AAChCJ,YAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAoBC,SAAU,mCAA9B,EAAT;AACH,KAFK,MAEA,IAAI,wBAAQH,YAAR,CAAJ,EAA2B;AAC7BL,YAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAoBC,SAAU,gCAA9B,EAAT;AACH,KAFK,MAEA,IAAI,CAAC,uBAAOJ,eAAP,EAAuBD,QAAvB,CAAL,EAAuC;AACzCH,YAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAoBC,SAAU,kCAA9B,EAAT;AACH,KAFK,MAEA,IAAI,CAAC,uBAAOH,aAAaM,WAAb,EAAP,EAAmCd,YAAYc,WAAZ,EAAnC,CAAL,EAAoE;AACtEX,YAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAoBC,SAAU,2BAA9B,EAAT;AACH,KAFK,MAED;AACDI,6BAAWC,OAAX,CAAmB,EAAEX,kBAAF,EAAnB,EAAiCY,IAAjC,CACI,UAACC,IAAD,EAAU;AACN,gBAAIA,IAAJ,EAAU;AACNf,oBAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAoBC,SAAU,6CAA9B,EAAT;AACH,aAFD,MAEK;AACD,oBAAMQ,eAAe,IAAIC,IAAJ,GAAWC,cAAX,GAA4BC,OAA5B,CAAoC,OAApC,EAA6C,GAA7C,EAAkDA,OAAlD,CAA0D,SAA1D,EAAqE,EAArE,CAArB;AACAP,qCAAWQ,UAAX,CAAsB,EAAClB,kBAAD,EAAWC,kBAAX,EAAqBa,0BAArB,EAAtB,EAA0DF,IAA1D,CACI,YAAI;AACAd,wBAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAmBC,SAAU,8CAA7B,EAAT;AACH,iBAHL,EAGOa,KAHP,CAII,UAACC,GAAD,EAAS;AACLtB,wBAAIM,IAAJ,CAASgB,GAAT;AACP,iBAND;AAOH;AACJ,SAdL;AAgBH;AACJ,CAlCD;;AAoCA3B,OAAOG,IAAP,CAAY,yBAAZ,EAAwC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,QAC1CE,QAD0C,GAC7BH,IAAIE,IADyB,CAC1CC,QAD0C;;AAElD,QAAGA,QAAH,EAAY;AACRU,6BAAWC,OAAX,CAAmB,EAAEX,kBAAF,EAAnB,EAAiCY,IAAjC,CACI,UAACC,IAAD,EAAU;AACN,gBAAIA,IAAJ,EAAU;AACNf,oBAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAoBC,SAAU,6CAA9B,EAAT;AACH,aAFD,MAEK;AACDR,oBAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAmBC,SAAU,oBAA7B,EAAT;AACH;AACJ,SAPL;AAQC;AACR,CAZD;;AAcAb,OAAOG,IAAP,CAAY,QAAZ,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,qBACFD,IAAIE,IADF;AAAA,QACzBC,QADyB,cACzBA,QADyB;AAAA,QACfC,QADe,cACfA,QADe;;AAEjC,QAAI,wBAAQD,QAAR,CAAJ,EAAuB;AACnBF,YAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAoBC,SAAU,4BAA9B,EAAT;AACH,KAFD,MAEM,IAAI,wBAAQL,QAAR,CAAJ,EAAuB;AACzBH,YAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAoBC,SAAU,4BAA9B,EAAT;AACH,KAFK,MAED;AAAEI,6BAAWC,OAAX,CAAmB,EAACX,kBAAD,EAAnB,EAA+BY,IAA/B,CACH,UAACC,IAAD,EAAU;AACN,gBAAGA,KAAKZ,QAAL,KAAkBA,QAArB,EAA8B;AAC1B,oBAAMoB,QAAQC,uBAAIC,IAAJ,CAAS;AACnBC,wBAAKX,KAAKY,GADS;AAEnBzB,8BAAWa,KAAKb,QAFG;AAGnB0B,6BAAUb,KAAKa;AAHI,iBAAT,EAIXC,iBAAOC,SAJI,CAAd;AAKA9B,oBAAIM,IAAJ,CAAS,EAAEC,MAAO,SAAT,EAAoBC,SAAU,+BAA9B,EAAgEe,YAAhE,EAAT;AACH,aAPD,MAOK;AACDvB,oBAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAmBC,SAAU,8CAA7B,EAAT;AACH;AACJ,SAZE,EAaLa,KAbK,CAcH,YAAM;AACFrB,gBAAIM,IAAJ,CAAS,EAACC,MAAO,SAAR,EAAmBC,SAAU,8CAA7B,EAAT;AACH,SAhBE;AAkBN;AACJ,CAzBD;;AA2BAb,OAAOG,IAAP,CAAY,UAAZ,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjC,QAAI+B,UAAUC,qBAAWC,MAAX,CAAkB;AAC5BC,cAAM,CADsB;AAE5BC,eAAO,CAFqB;AAG5BC,eAAO,IAHqB;AAI5BC,oBAAY;AAJgB,KAAlB,CAAd;AAMA;AACAxC,kBAAckC,QAAQO,IAAtB;AACAtC,QAAIO,IAAJ,CAAS,KAAT;AACAP,QAAIM,IAAJ,CAASyB,QAAQQ,IAAjB;AACH,CAXD;;AAaA5C,OAAOG,IAAP,CAAY,UAAZ,EAAwBL,OAAO+C,MAAP,CAAc,SAAd,CAAxB,EAAkD,UAAUzC,GAAV,EAAeC,GAAf,EAAoByC,IAApB,EAA0B;AAAA,QAChEvC,QADgE,GACnDH,IAAI2C,KAD+C,CAChExC,QADgE,EACxC;;AAChCyC,iBAAGC,MAAH,CAAU7C,IAAI8C,IAAJ,CAASC,IAAnB,EAAyB/C,IAAI8C,IAAJ,CAASE,WAAT,GAAuB7C,QAAvB,GAAkC,MAA3D,EAAmE;AAAA,eAAMF,IAAIgD,QAAJ,CAAa,4BAAb,CAAN;AAAA,KAAnE;AACH,CAHD;;kBAKerD,M","file":"users.js","sourcesContent":["import express from 'express';\r\nimport UsersModel from '../models/usersModel';\r\nimport svgCaptcha from 'svg-captcha';\r\nimport { isEmpty, equals , isLength} from 'validator';\r\nimport multer from 'multer';   // 用于上传图片\r\nimport fs from 'fs';  \r\nimport jwt from 'jsonwebtoken';  // jwt\r\nimport config from './config'\r\n\r\nlet upload = multer({ dest: './public/img/profile/' })  // 设置上传头像的文件的存储目录\r\n\r\nlet Router = express.Router();\r\nlet captchaText = \"\";\r\n\r\nRouter.post('/register',  (req, res) => {\r\n    const { username, password, passwordConfirm, verification } = req.body;\r\n    if( isEmpty(username) ){\r\n        res.json({type : \"warning\" , content : \"username can not be empty!\" });\r\n    }else if( isEmpty(password) ){\r\n        res.json({type : \"warning\" , content : \"password can not be empty!\" });\r\n    }else if( !isLength(password, { min : 6, max : 18 })){\r\n        res.json({type : \"warning\" , content : \"password length shoule be 6 to 18\" });\r\n    }else if( isEmpty(passwordConfirm) ){\r\n        res.json({type : \"warning\" , content : \"passwordConfirm can not be empty!\" });\r\n    }else if( isEmpty(verification) ){\r\n        res.json({type : \"warning\" , content : \"verification can not be empty!\" });\r\n    }else if( !equals(passwordConfirm,password) ){\r\n        res.json({type : \"warning\" , content : \"Both passwords must be the same!\" });\r\n    }else if( !equals(verification.toLowerCase(), captchaText.toLowerCase()) ){\r\n        res.json({type : \"warning\" , content : \"captcha must be the same!\" }); \r\n    }else{\r\n        UsersModel.findOne({ username }).then(\r\n            (info) => { \r\n                if( info ){\r\n                    res.json({type : \"warning\" , content : \"username exists, please change another one!\" });\r\n                }else{\r\n                    const dateRegister = new Date().toLocaleString().replace(/[年月]/g, '-').replace(/[日上下午]/g, '');\r\n                    UsersModel.insertMany({username, password, dateRegister}).then(\r\n                        ()=>{\r\n                            res.json({type : \"success\", content : \"Congratulations, registration is successful!\"});\r\n                        }).catch(\r\n                        (err) => {\r\n                            res.json(err);\r\n                    });\r\n                }\r\n            }\r\n        );\r\n    }\r\n})\r\n\r\nRouter.post('/register_checkusername',  (req, res) => {\r\n    const { username } = req.body;\r\n    if(username){\r\n        UsersModel.findOne({ username }).then(\r\n            (info) => { \r\n                if( info ){\r\n                    res.json({type : \"warning\" , content : \"username exists, please change another one!\" });\r\n                }else{\r\n                    res.json({type : \"success\", content : \"username available\"});\r\n                }    \r\n            });\r\n        }\r\n})\r\n\r\nRouter.post('/login',  (req, res) => {\r\n    const { username, password } = req.body;\r\n    if( isEmpty(username) ){\r\n        res.json({type : \"warning\" , content : \"username can not be empty!\" });\r\n    }else if( isEmpty(password) ){\r\n        res.json({type : \"warning\" , content : \"password can not be empty!\" });\r\n    }else{ UsersModel.findOne({username}).then(\r\n        (info) => {\r\n            if(info.password === password){\r\n                const token = jwt.sign({\r\n                    id : info._id,\r\n                    username : info.username,\r\n                    profile : info.profile\r\n                }, config.jwtSecret)\r\n                res.json({ type : \"success\", content : \"Login Successfully! Welcome !\" , token});\r\n            }else{\r\n                res.json({type : \"warning\", content : \"Wrong username or password, please amend it!\" });\r\n            } \r\n        }\r\n    ).catch(\r\n        () => {\r\n            res.json({type : \"warning\", content : \"Wrong username or password, please amend it!\" });\r\n        }\r\n    )\r\n    }\r\n})\r\n\r\nRouter.post('/captcha',(req, res) => {\r\n    let captcha = svgCaptcha.create({\r\n        size: 4,\r\n        noise: 1,\r\n        color: true,\r\n        background: '#cc9966'\r\n    });\r\n    // req.session.captcha = captcha.text;  // 不知道官网为什么要设置这一句, 是用来存储 验证码的\r\n    captchaText = captcha.text;\r\n    res.type('svg');\r\n    res.json(captcha.data);\r\n})\r\n\r\nRouter.post('/profile', upload.single('profile'), function (req, res, next) {  \r\n    const { username } = req.query  // 这里居然是用前端传来的， 以后再修改\r\n    fs.rename(req.file.path, req.file.destination + username + '.jpg', () => res.redirect(\"http://134.175.53.155/home\"));\r\n})\r\n\r\nexport default Router;"]}