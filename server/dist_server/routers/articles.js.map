{"version":3,"sources":["../../server/routers/articles.js"],"names":["Router","express","post","req","res","body","type","title","content","json","datePost","Date","toLocaleString","replace","ArticlesModel","insertMany","times_of_view","times_of_praise","remarks","then","catch","err","find","infos","_id","update","$inc"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA,IAAIA,SAASC,kBAAQD,MAAR,EAAb;;AAEAA,OAAOE,IAAP,CAAY,aAAZ,EAA2B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,oBACJD,IAAIE,IADA;AAAA,QAC7BC,IAD6B,aAC7BA,IAD6B;AAAA,QACvBC,KADuB,aACvBA,KADuB;AAAA,QAChBC,OADgB,aAChBA,OADgB;;AAErC,QAAI,wBAAQF,IAAR,CAAJ,EAAmB;AACfF,YAAIK,IAAJ,CAAS,EAACH,MAAO,SAAR,EAAoBE,SAAU,wBAA9B,EAAT;AACH,KAFD,MAEM,IAAI,wBAAQD,KAAR,CAAJ,EAAoB;AACtBH,YAAIK,IAAJ,CAAS,EAACH,MAAO,SAAR,EAAoBE,SAAU,yBAA9B,EAAT;AACH,KAFK,MAEA,IAAI,wBAAQA,OAAR,CAAJ,EAAsB;AACxBJ,YAAIK,IAAJ,CAAS,EAACH,MAAO,SAAR,EAAoBE,SAAU,2BAA9B,EAAT;AACH,KAFK,MAED;AACD,YAAIE,WAAW,IAAIC,IAAJ,GAAWC,cAAX,GAA4BC,OAA5B,CAAoC,OAApC,EAA6C,GAA7C,EAAkDA,OAAlD,CAA0D,SAA1D,EAAqE,EAArE,CAAf;AACAC,gCAAcC,UAAd,CAAyB,EAAET,UAAF,EAAQC,YAAR,EAAeC,gBAAf,EAAwBE,kBAAxB,EAAkCM,eAAgB,CAAlD,EAAqDC,iBAAkB,CAAvE,EAA0EC,SAAU,EAApF,EAAzB,EAAmHC,IAAnH,CACI,YAAI;AACAf,gBAAIK,IAAJ,CAAS,EAACH,MAAO,SAAR,EAAmBE,SAAU,4CAA7B,EAAT;AACH,SAHL,EAGOY,KAHP,CAII,UAACC,GAAD,EAAS;AACLjB,gBAAIK,IAAJ,CAASY,GAAT;AACP,SAND;AAOP;AAAC,CAjBF;;AAmBArB,OAAOE,IAAP,CAAY,mBAAZ,EAAiC,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC3CU,4BAAcQ,IAAd,GAAqBH,IAArB,CACI,UAACI,KAAD,EAAW;AACPnB,YAAIK,IAAJ,CAAS,EAACH,MAAO,SAAR,EAAmBE,SAAU,yCAA7B,EAAwEe,YAAxE,EAAT;AACH,KAHL,EAGOH,KAHP,CAIQ,UAACC,GAAD,EAAS;AACLjB,YAAIK,IAAJ,CAASY,GAAT;AACH,KANT;AAQH,CATD;;AAWArB,OAAOE,IAAP,CAAY,gBAAZ,EAA8B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,QAChCoB,GADgC,GACxBrB,IAAIE,IADoB,CAChCmB,GADgC;;AAExCV,4BAAcW,MAAd,CAAqB,EAACD,KAAIA,GAAL,EAArB,EAA+B,EAACE,MAAK,EAACV,eAAgB,CAAjB,EAAN,EAA/B,EAA2DG,IAA3D,CACI,UAACI,KAAD,EAAW;AACPnB,YAAIK,IAAJ,CAAS,EAACH,MAAO,SAAR,EAAT;AACH,KAHL,EAGOc,KAHP,CAIQ,UAACC,GAAD,EAAS;AACLjB,YAAIK,IAAJ,CAASY,GAAT;AACH,KANT;AAQH,CAVD;;kBAYerB,M","file":"articles.js","sourcesContent":["import express from 'express';\r\nimport ArticlesModel from '../models/articlesModel';\r\nimport { isEmpty } from 'validator';\r\n\r\nlet Router = express.Router();\r\n\r\nRouter.post('/addArticle', (req, res) => {\r\n    const { type, title, content } = req.body;\r\n    if( isEmpty(type) ){\r\n        res.json({type : \"warning\" , content : \"type can not be empty!\" });\r\n    }else if( isEmpty(title) ){\r\n        res.json({type : \"warning\" , content : \"title can not be empty!\" });\r\n    }else if( isEmpty(content) ){\r\n        res.json({type : \"warning\" , content : \"content can not be empty!\" });\r\n    }else{\r\n        let datePost = new Date().toLocaleString().replace(/[年月]/g, '-').replace(/[日上下午]/g, '');\r\n        ArticlesModel.insertMany({ type, title, content, datePost, times_of_view : 0, times_of_praise : 0, remarks : '' }).then(\r\n            ()=>{\r\n                res.json({type : \"success\", content : \"Congratulations, AddArticle is successful!\"});\r\n            }).catch(\r\n            (err) => {\r\n                res.json(err);\r\n        });\r\n}})\r\n\r\nRouter.post('/get_all_articles', (req, res) => {\r\n    ArticlesModel.find().then( \r\n        (infos) => {\r\n            res.json({type : \"success\", content : \"Congratulations, GetItem is successful!\", infos});\r\n        }).catch(\r\n            (err) => {\r\n                res.json(err);\r\n            }\r\n        );\r\n})\r\n\r\nRouter.post('/add_view_time', (req, res) => {\r\n    const { _id } = req.body;\r\n    ArticlesModel.update({_id:_id},{$inc:{times_of_view : 1}}).then( \r\n        (infos) => {\r\n            res.json({type : \"success\"});\r\n        }).catch(\r\n            (err) => {\r\n                res.json(err);\r\n            }\r\n        );\r\n})\r\n\r\nexport default Router;"]}